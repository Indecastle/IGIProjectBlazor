@page
@using Microsoft.AspNetCore.Identity
@using BlazorApp2.Models
@inject SignInManager<User> _signInManager
@model BlazorApp2.Pages.LoginModel
@{
    ViewData["Title"] = "Log in";
}
<h2>Login</h2>

@functions {
    public async Task<IActionResult> OnGetAsync(string paramUsername, string paramPassword)
    {
        string returnUrl = Url.Content("~/");
        try
        {
            // Clear the existing external cookie
            await _signInManager.SignOutAsync();
        }
        catch { }
        // *** !!! This is where you would validate the user !!! ***
        // In this example we just log the user in
        // (Always log the user in for this demo)
        /*var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, paramUsername),
            new Claim(ClaimTypes.Role, "Administrator"),
        };
        var claimsIdentity = new ClaimsIdentity(
            claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var authProperties = new AuthenticationProperties
        {
            IsPersistent = true,
            RedirectUri = this.Request.Host.Value
        };
        try
        {
            await HttpContext.SignInAsync(
            CookieAuthenticationDefaults.AuthenticationScheme,
            new ClaimsPrincipal(claimsIdentity),
            authProperties);
        }
        catch (Exception ex)
        {
            string error = ex.Message;
        }*/
        var user3 = await _signInManager.UserManager.FindByEmailAsync(paramUsername);
        await _signInManager.PasswordSignInAsync(user3, paramPassword, true, true);
        return LocalRedirect(returnUrl);
    }
}