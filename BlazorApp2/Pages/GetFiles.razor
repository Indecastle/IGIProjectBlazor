@page "/GetFiles/{KeyName}/"
@inject IS3Service _is3;
@inject ApplicationContext _db;
@inject Services.HttpContextAccessorService HttpContext
@inject IJSRuntime JsRuntime;
@inject IMatToaster Toaster
@implements IDisposable

@if (IsTimer)
{
    <div class="my_sidebar_fixed">
        <div class="my_sidebar__navigation">
            <div class="my_navigation__scroll">
                <div class="my_navigation__items_standard">
                    <div style="padding: 20px 40px;">
                        <span class="my_span-timer">@Timer.ToString(@"hh\:mm\:ss")</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="my_root_content">
        <div class="root__content">
            <ChildAmazonGridFiles IsSetFiles="false" Dir="@Dir" IsGetAttachment="@IsGetAttachment" />
        </div>
    </div>
}
else
{
    <h3>Link not found</h3>
}







@code {
    [Parameter]
    public string KeyName { get; set; }
    FastFile ffile;
    private string Token { get; set; }

    [Parameter]
    public Dictionary<string, object> InputFileAttributes { get; set; } = new Dictionary<string, object>()
{
        { "hidden", "" },
        { "id", "idfile"}
    };

    public S3Dir Dir { get; set; }
    public bool IsGetAttachment { get; set; }



    protected override async Task OnInitializedAsync()
    {
        Token = HttpContext.Context.Request.Cookies["token"];
        IsTimer = true;
        ffile = _db.FastFiles.FirstOrDefault(f => f.KeyName == KeyName);
        if (ffile != null)
        {
            Console.WriteLine("############ STEP #1 --- " + ffile.KeyName);
            string tempRootPath = "TempFiles/" + ffile.KeyName;
            Dir = new S3Dir(_is3, tempRootPath);
            await _is3.CreateFolderAsync(tempRootPath);

            await Dir.UpdateDirAsync();
            StateHasChanged();
            Console.WriteLine("############ IS AUTHED");

            Timer_Tick();
        }
        else
        {
            IsTimer = false;
            Dir = null;
        }
    }

    bool IsTimer { get; set; }
    TimeSpan Timer { get; set; }
    async Task Timer_Tick()
    {
        while (IsTimer && ffile.EndTime > DateTime.Now)
        {
            Timer = ffile.EndTime.Subtract(DateTime.Now);
            StateHasChanged();
            await Task.Delay(1000);
        }
        IsTimer = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        IsTimer = false;
    }
}
