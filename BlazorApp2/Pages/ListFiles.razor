@page "/ListFiles"
@using System.IO;
@using Amazon.S3.Model;
@inject IHostingEnvironment _env;
@inject IS3Service _is3;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<AuthorizeView>
    <Authorized>
        <AmazonGrid PageSize="10" GetUserName="GetUserName" GetIsAuth="GetIsAuth"/>
            @*
                <MyBlazorGrid Items="@S3ListFiles" PageSize="10" Context="S3file" OnClickRow="GetGenUrl">
                    <GridHeader>
                        <th>Name</th>
                        <th>Size</th>
                        <th>LastModified</th>
                        <th>Owner</th>
                    </GridHeader>
                    <GridRow>
                        <td scope="col">@S3file.Key</td>
                        <td scope="col">@S3file.Size</td>
                        <td scope="col">@S3file.LastModified</td>
                        <td scope="col">@S3file.Owner</td>
                    </GridRow>
                </MyBlazorGrid>
            *@

    </Authorized>
    <NotAuthorized>
        <h2>"Bad Guy"</h2>
    </NotAuthorized>
</AuthorizeView>


@code {
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }


    async Task<bool> GetIsAuth()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.Identity.IsAuthenticated;
    }
    async Task<string> GetUserName()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.Identity.Name;
    }
}
