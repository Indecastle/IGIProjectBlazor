@page "/Test/cm/DynamicItems"
@inject IJSRuntime jsRuntime

<p>Right-click on the list items to view the context menu with dynamic items</p>
<ul>
    @foreach (var item in TodoItems)
    {
        <ContextMenuTrigger MenuId="dynamicItemsMenu" Data="item" WrapperTag="li">
            <input type="checkbox" @bind="item.IsChecked" /> @item.Text
        </ContextMenuTrigger>
    }
</ul>
<button type="button" @onclick="ResetList">Reset list</button>

<ContextMenu Id="dynamicItemsMenu" OnAppearing="MenuOnAppearingHandler">
    <Item Id="menuitem-check" OnClick="ItemClick" OnAppearing="ItemOnAppearingHandler"> <i class="far fa-check-square blue-icon"></i> Check</Item>
    <Item Id="menuitem-uncheck" OnClick="ItemClick" OnAppearing="ItemOnAppearingHandler"> <i class="far fa-square blue-icon"></i> Uncheck</Item>
    <Item Id="menuitem-delete" OnClick="ItemClick" OnAppearing="ItemOnAppearingHandler"> <i class="fas fa-trash-alt red-icon"></i> Delete</Item>
</ContextMenu>

@functions{
    class TodoItem
    {
        public string Text { get; set; }
        public bool IsChecked { get; set; }
        public bool CanBeDeleted { get; set; } = true;
        public bool CanShowMenu { get; set; } = true;
    }

    List<TodoItem> TodoItems = null;

    protected override void OnInitialized()
    {
        InitList();
    }

    private void ResetList()
    {
        InitList();
    }

    private void InitList()
    {
        TodoItems = new List<TodoItem>
{
            new TodoItem
            {
                Text = "Item 1",
                IsChecked = true
            },
            new TodoItem
            {
                Text="Item 2"
            },
            new TodoItem
            {
                Text="Item 3 (Cannot be deleted)",
                CanBeDeleted = false,
                IsChecked = true
            },
            new TodoItem
            {
                Text="Item 4 (Cannot be deleted)",
                CanBeDeleted = false
            },
            new TodoItem
            {
                Text="Item 5 (Does NOT show the menu)",
                CanShowMenu = false
            }
        };
    }

    void MenuOnAppearingHandler(MenuAppearingEventArgs e)
    {
        var currentTodoItem = e.Data as TodoItem;
        e.PreventShow = !currentTodoItem.CanShowMenu;
    }

    void ItemOnAppearingHandler(ItemAppearingEventArgs e)
    {
        var currentTodoItem = e.Data as TodoItem;
        switch (e.MenuItem.Id)
        {
            case "menuitem-delete":
                e.IsEnabled = currentTodoItem.CanBeDeleted;
                break;
            case "menuitem-check":
                e.IsVisible = !currentTodoItem.IsChecked;
                break;
            case "menuitem-uncheck":
                e.IsVisible = currentTodoItem.IsChecked;
                break;
        }
    }

    void ItemClick(ItemClickEventArgs e)
    {
        var currentTodoItem = e.Data as TodoItem;
        switch (e.MenuItem.Id)
        {
            case "menuitem-delete":
                TodoItems.Remove(currentTodoItem);
                break;
            case "menuitem-check":
                currentTodoItem.IsChecked = true;
                break;
            case "menuitem-uncheck":
                currentTodoItem.IsChecked = false;
                break;
        }
    }
}