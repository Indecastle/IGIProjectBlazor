@page "/Files"
@using System.IO;
@inject IHostingEnvironment _env;
@inject IS3Service _is3;

<h1>Multiple files</h1>

<p>A multi-file picker that displays information about selection and shows progress as each one is loaded.</p>

<InputFile multiple OnChange="files => selectedFiles = files" />

@if (selectedFiles != null)
{
    foreach (var file in selectedFiles)
    {
        var isLoading = file.Data.Position > 0;

        <div class="file-row">
            <!-- File info -->
            <div>
                <h2>@file.Name</h2>
                Size: <strong>@file.Size bytes</strong>;
                Last modified: <strong>@file.LastModified.ToShortDateString()</strong>;
                Type: <strong>@file.Type</strong>
            </div>

            <!-- Upload button -->  
            <button @onclick="() => LoadFile(file)" disabled="@isLoading">
                @if (!isLoading)
                {
                    <span>Load</span>
                }
                else
                {
                    <span>Loaded @((100.0 * file.Data.Position / file.Size).ToString("0"))%</span>
                }
            </button>
        </div>
    }
}

@code {
    IFileListEntry[] selectedFiles;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    }

    async Task LoadFile(IFileListEntry file)
    {
        // So the UI updates to show progress
        file.OnDataRead += (sender, eventArgs) => InvokeAsync(StateHasChanged);

        // Just load into .NET memory to show it can be done
        // Alternatively it could be saved to disk, or parsed in memory, or similar
        var ms = new System.IO.MemoryStream();
        await file.Data.CopyToAsync(ms);
        ms.Seek(0, SeekOrigin.Begin);
        //File.WriteAllBytes(Path.Combine(_env.WebRootPath, "download", file.Name), ms.ToArray());
        Console.WriteLine("start@@@@@@@@@@@@@@@@@@@");
        await _is3.UploadBucketAsync(ms);
        Console.WriteLine("end@@@@@@@@@@@@@@@@@@@");
    }
}